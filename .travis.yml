language: c
dist: trusty
sudo: false
cache: ccache
env:
  global:
  - ARCH=x64
addons:
  apt:
    packages:
    - python3
    - python3-pip
    - python3-setuptools
    - perl
matrix:
  include:
  - name: 'Linux GCC: +Debian packages +BuiltinRegex +Strict'
    os: linux
    compiler: gcc
    env: ADDITIONAL_BUILDS="debian" LINKAGE=std
    before_script:
    - ./configure --CFLAGS="-std=c99" --CXXFLAGS="-std=c++98" --install-deps --disable-lz4-ext
      --disable-regex-ext --prefix="$PWD/dest"
  - name: RPM packages
    os: linux
    compiler: gcc
    env: ADDITIONAL_BUILDS="centos" SKIP_MAKE=y
  - name: 'Linux clang: +alpine'
    os: linux
    compiler: clang
    env: ADDITIONAL_BUILDS="alpine" LINKAGE=std
    before_script:
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest" --enable-werror
  - name: 'Linux clang: +static +alpine-static'
    os: linux
    compiler: clang
    env: ADDITIONAL_BUILDS="alpine-static" LINKAGE=static
    before_script:
    - ./configure --enable-static --install-deps --source-deps-only --disable-gssapi
      --disable-lz4-ext --prefix="$PWD/dest"
  - name: OSX GCC
    os: osx
    compiler: gcc
    env: LINKAGE=std
    before_script:
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest" --enable-werror
  - name: 'OSX clang: +static'
    os: osx
    osx_image: xcode9.2
    compiler: clang
    env: LINKAGE=static HOMEBREW_NO_AUTO_UPDATE=1
    before_script:
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest" --enable-static
      --disable-syslog
  - name: Windows MinGW-w64
    os: windows
    env:
    - SKIP_MAKE=y
    before_install:
    - source ./packaging/mingw-w64/travis-before-install.sh
    before_script:
    - "./packaging/mingw-w64/configure-build-msys2-mingw.sh"
  - name: 'Linux GCC: +integration-tests +copyright-check +doc-check'
    os: linux
    dist: xenial
    compiler: gcc
    env: NO_ARTIFACTS=y RUN_INTEGRATION_TESTS=y COPYRIGHT_CHECK=y DOC_CHECK=y
    before_script:
    - wget -O rapidjson-dev.deb https://launchpad.net/ubuntu/+archive/primary/+files/rapidjson-dev_1.1.0+dfsg2-3_all.deb
    - sudo dpkg -i rapidjson-dev.deb
    - sudo pip3 install -r tests/requirements.txt
    - sudo apt update
    - sudo apt install -y doxygen graphviz gdb
    - ./configure --install-deps --disable-lz4-ext --prefix="$PWD/dest"
  - name: 'Linux GCC: +devel +code-cov'
    os: linux
    dist: bionic
    compiler: gcc
    env: NO_ARTIFACTS=y
    before_script:
    - ./configure --enable-devel --disable-lz4-ext --prefix="$PWD/dest"
    - "./packaging/tools/rdutcoverage.sh"
install:
- ccache -s || echo "CCache is not available."
- rm -rf artifacts dest
- mkdir dest artifacts
before_cache:
- if [[ $TRAVIS_OS_NAME == windows ]]; then $msys2 pacman --sync --clean --noconfirm
  ; fi
before_script: 
script:
- if [[ $SKIP_MAKE != y ]]; then make -j2 all examples check && make -j2 -C tests
  build ; fi
- if [[ $SKIP_MAKE != y && $RUN_INTEGRATION_TESTS != y ]]; then make -C tests run_local_quick
  ; fi
- if [[ $SKIP_MAKE != y ]]; then make install ; fi
- if [[ -z $NO_ARTIFACTS ]]; then (cd dest && tar cvzf ../artifacts/librdkafka-${CC}.tar.gz
  .) ; fi
- for distro in $ADDITIONAL_BUILDS ; do packaging/tools/distro-build.sh $distro ||
  exit 1 ; done
- if [[ $COPYRIGHT_CHECK == y ]]; then make copyright-check ; fi
- if [[ $DOC_CHECK == y ]]; then make docs ; fi
- if [[ $RUN_INTEGRATION_TESTS == y ]]; then (cd tests && travis_retry ./interactive_broker_version.py
  -c "make quick" 2.4.0) ; fi
- if [[ -f tests/core ]] && (which gdb >/dev/null); then (cd tests && LD_LIBRARY_PATH=../src:../src-cpp
  gdb ./test-runner core < backtrace.gdb) ; fi
deploy:
  before_deploy:
  - tar -cvzf artifacts.tar.gz artifacts/
  provider: releases
  api_key:
    secure: o4URLGfx+LJMYT74fvxsvjAii6h19umHQ4fIEaA7dFr1g+xReHM+MXjsOPRJ5JelD2sI/Wg3tvlvxcCCwJUOh/NPRP+n9MLjlXmoBrxmrzey6Nr/7J+Hv9WdxWuDKI94qtgIQkK7wN8eeGfaNLgww3z3d7Nh9Dx7dr2NzvTP5wls85Tw5NVIz4paX0gd4dPRRwAFl76fL4ta96ApyfsFDUzQPRNpXt9gDXjKf7SpP4xjIfV+x1WXkSXNW9gS7/ENeCeGmAxug0TYp5u+nMPNjCKgpjXN0chMSGsDR5vBF0WaGtYSCiugyCWl7pSYjK1nkkDggx/n1vxNMQXZXGX5FCa2TzMl3g78q8ECDOs90Zh5Fly1IcRm48IzRNg2xiVEYbmumr3bmpIJThwtPCjR6aa7WaWDoFpal3JwuIB9fpTRnyB0wMMsgK67B0ryZ5THCxUr1qcwsUZl2Q9ZEwyPFn6J7SVTjiSSxj/GuVaiJ8YElgpicfbDjNMZDP6YCSZy3J108NPpVPy8GmIVNt1WORWwDG+qCuaWtBjSiiqi/n0ZRYG3GwSXBVTdBuRSmsGGaUW2fTQ043jdLesKio3Uwra036kaNN2Qot+lYYQ+guXghJ1TLSRl0Zoxhx6p+mjbIkrCSGtnb1x1rA2OxDcWREguX2cvCoXgXffyfd8X1gA=
  skip_cleanup: true
  file: "./artifacts.tar.gz"
  on:
    repo: fryderykhuang/librdkafka
    all_branches: true
    tags: true
    on: "$NO_ARTIFACTS != y"
